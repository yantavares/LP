{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module Root.Questoes.Q5.AbsLI where

-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

import qualified Data.String
import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Read, Show)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data Program = Prog Stm
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stm
  = SAss Ident Exp
  | SBlock [Stm]
  | SWhile Exp Stm
  | SdoWhile Stm Exp
  | STry [Stm] [Stm] [Stm]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
  = EOr Exp Exp
  | EAnd Exp Exp
  | ENot Exp
  | ECon Exp Exp
  | EAdd Exp Exp
  | ESub Exp Exp
  | EMul Exp Exp
  | EDiv Exp Exp
  | EInt Integer
  | EVar Ident
  | EStr String
  | ETrue
  | EFalse
  deriving (C.Eq, C.Ord, C.Show, C.Read)
